using Fracture.Common.Util;
using Fracture.Engine.Physics.Dynamics;

namespace Fracture.Engine.Physics.Contacts
{
    /// <summary>
    /// Class that represents a contact pair which contain
    /// two bodies of interest for checking collision in 
    /// narrow phase. These are generated by the broad 
    /// phase contact solver.
    /// </summary>
    public struct ContactPair
    {
        #region Properties
        /// <summary>
        /// Fist body of interest that could collide with the second body.
        /// </summary>
        public Body A
        {
            get;
            set;
        }

        /// <summary>
        /// Second body of interest that could collide with the first one.
        /// </summary>
        public Body B
        {
            get;
            set;
        }
        #endregion

        public bool Equals(ContactPair other)
            => A == other.A &&
               B == other.B;

        public override bool Equals(object obj)
        {
            try
            {
                return Equals((ContactPair)obj);
            }
            catch
            {
                return false;
            }
        }

        public override int GetHashCode()
            => HashUtils.Create()
                        .Append(A)
                        .Append(B);

        public static bool operator ==(ContactPair lhs, ContactPair rhs)
            => lhs.Equals(rhs);

        public static bool operator !=(ContactPair lhs, ContactPair rhs)
            => !lhs.Equals(rhs);
    }
}
